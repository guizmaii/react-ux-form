{"version":3,"file":"index.5863d8d6.js","sources":["../../vite/modulepreload-polyfill","../../src/components/Link.tsx","../../src/components/Input.tsx","../../src/components/Page.tsx","../../src/utils/promises.ts","../../src/forms/AsyncSubmissionForm.tsx","../../src/forms/AsyncValidationForm.tsx","../../src/forms/BasicForm.tsx","../../src/forms/CheckboxesForm.tsx","../../src/forms/CreditCardForm.tsx","../../src/forms/FieldsListenerForm.tsx","../../src/forms/IBANForm.tsx","../../src/forms/InputMaskingForm.tsx","../../src/forms/StrategiesForm.tsx","../../src/App.tsx","../../src/index.tsx"],"sourcesContent":["const p = function polyfill() {\n    const relList = document.createElement('link').relList;\n    if (relList && relList.supports && relList.supports('modulepreload')) {\n        return;\n    }\n    for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n        processPreload(link);\n    }\n    new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type !== 'childList') {\n                continue;\n            }\n            for (const node of mutation.addedNodes) {\n                if (node.tagName === 'LINK' && node.rel === 'modulepreload')\n                    processPreload(node);\n            }\n        }\n    }).observe(document, { childList: true, subtree: true });\n    function getFetchOpts(script) {\n        const fetchOpts = {};\n        if (script.integrity)\n            fetchOpts.integrity = script.integrity;\n        if (script.referrerpolicy)\n            fetchOpts.referrerPolicy = script.referrerpolicy;\n        if (script.crossorigin === 'use-credentials')\n            fetchOpts.credentials = 'include';\n        else if (script.crossorigin === 'anonymous')\n            fetchOpts.credentials = 'omit';\n        else\n            fetchOpts.credentials = 'same-origin';\n        return fetchOpts;\n    }\n    function processPreload(link) {\n        if (link.ep)\n            // ep marker = processed\n            return;\n        link.ep = true;\n        // prepopulate the load record\n        const fetchOpts = getFetchOpts(link);\n        fetch(link.href, fetchOpts);\n    }\n};__VITE_IS_MODERN__&&p();","import { useTheme } from \"@chakra-ui/system\";\nimport * as React from \"react\";\nimport { Link as WouterLink, LinkProps, useRoute } from \"wouter\";\n\nexport const Link = (props: LinkProps & { href: string }) => {\n  const { colors } = useTheme();\n  const [active] = useRoute(props.href);\n\n  return (\n    <WouterLink\n      {...props}\n      style={{\n        borderRadius: 4,\n        color: colors.gray[600],\n        display: \"flex\",\n        flexGrow: 1,\n        fontWeight: 500,\n        paddingBottom: 5,\n        paddingLeft: 12,\n        paddingRight: 12,\n        paddingTop: 5,\n        ...(active && {\n          backgroundColor: colors.green[100],\n          color: colors.green[700],\n        }),\n      }}\n    />\n  );\n};\n","import { FormLabel } from \"@chakra-ui/form-control\";\nimport { useId } from \"@chakra-ui/hooks\";\nimport { CheckIcon, WarningIcon } from \"@chakra-ui/icons\";\nimport { Input as ChakraInput, InputGroup, InputProps, InputRightElement } from \"@chakra-ui/input\";\nimport { Box, Flex, Spacer, Text } from \"@chakra-ui/layout\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport * as React from \"react\";\nimport { Strategy } from \"react-ux-form\";\n\ntype Props = {\n  error?: string;\n  label: string;\n  onBlur: () => void;\n  validation?: string;\n  strategy: Strategy;\n  placeholder?: string;\n  onChange?: InputProps[\"onChange\"];\n  onChangeText?: (text: string) => void;\n  valid: boolean;\n  validating: boolean;\n  value: string;\n};\n\nexport const Input = React.forwardRef<HTMLInputElement, Props>(\n  (\n    {\n      error,\n      label,\n      onBlur,\n      validation,\n      strategy,\n      placeholder,\n      onChange,\n      onChangeText,\n      valid,\n      validating,\n      value,\n    },\n    forwardedRef,\n  ) => {\n    const id = useId();\n\n    return (\n      <Box>\n        <FormLabel htmlFor={id} marginBottom={0}>\n          {label}\n        </FormLabel>\n\n        <Flex flexDirection=\"row\" marginBottom={2} alignItems=\"center\">\n          <Text color=\"gray.400\" fontSize={14} fontWeight=\"medium\">\n            {validation}\n          </Text>\n\n          <Spacer width={2} />\n\n          <Text color=\"gray.500\" fontSize={12} fontWeight=\"medium\">\n            {strategy}Â âœ¨\n          </Text>\n        </Flex>\n\n        <InputGroup>\n          <ChakraInput\n            id={id}\n            ref={forwardedRef}\n            error={error}\n            onBlur={onBlur}\n            placeholder={placeholder}\n            value={value}\n            isInvalid={error != null}\n            onChange={(e) => {\n              onChange?.(e);\n              onChangeText?.(e.target.value);\n            }}\n          />\n\n          {valid && (\n            <InputRightElement>\n              <CheckIcon color=\"green.500\" />\n            </InputRightElement>\n          )}\n\n          {validating && (\n            <InputRightElement>\n              <Spinner color=\"blue.500\" size=\"sm\" />\n            </InputRightElement>\n          )}\n\n          {error != null && (\n            <InputRightElement>\n              <WarningIcon color=\"red.500\" />\n            </InputRightElement>\n          )}\n        </InputGroup>\n\n        <Box height={8}>\n          <Spacer height={1} />\n\n          {error != null && (\n            <Text color=\"red.500\" fontWeight={500} fontSize={14}>\n              {error}\n            </Text>\n          )}\n        </Box>\n      </Box>\n    );\n  },\n);\n","import { Flex, Heading, Spacer, Text } from \"@chakra-ui/layout\";\nimport * as React from \"react\";\n\nexport const Page = ({\n  children,\n  title,\n  description,\n}: {\n  children: React.ReactNode;\n  title: string;\n  description?: React.ReactNode;\n}) => (\n  <Flex\n    flexDirection=\"column\"\n    flexGrow={1}\n    flexShrink={1}\n    overflowY=\"scroll\"\n    paddingTop={{ base: 6, md: 8 }}\n    paddingBottom={{ base: 6, md: 8 }}\n    paddingLeft={{ base: 5, md: 10 }}\n    paddingRight={{ base: 5, md: 10 }}\n  >\n    <main style={{ maxWidth: 768 }}>\n      <Heading>{title}</Heading>\n\n      {description ? (\n        <>\n          <Spacer height={4} />\n          <Text color=\"gray.500\">{description}</Text>\n          <Spacer height={12} />\n        </>\n      ) : (\n        <Spacer height={8} />\n      )}\n\n      {children}\n    </main>\n  </Flex>\n);\n","export const resolveAfter = <T>(delay: number, value?: T): Promise<T | void> =>\n  new Promise((resolve) => {\n    setTimeout(() => resolve(value), delay);\n  });\n\nexport const rejectAfter = <T>(delay: number, value?: T): Promise<T | void> =>\n  new Promise((_, reject) => {\n    setTimeout(() => reject(value), delay);\n  });\n","import { Button } from \"@chakra-ui/button\";\nimport { HStack, Spacer } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport * as React from \"react\";\nimport { useForm } from \"react-ux-form\";\nimport validator from \"validator\";\nimport { Input } from \"../components/Input\";\nimport { Page } from \"../components/Page\";\nimport { resolveAfter } from \"../utils/promises\";\n\nexport const AsyncSubmissionForm = () => {\n  const { Field, resetForm, submitForm, formStatus } = useForm({\n    emailAddress: {\n      strategy: \"onSuccessOrBlur\",\n      initialValue: \"\",\n      sanitize: (value) => value.trim(),\n      validate: (value) => {\n        if (!validator.isEmail(value)) {\n          return \"A valid email is required\";\n        }\n      },\n    },\n  });\n\n  const toast = useToast();\n\n  const onSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    submitForm(\n      (values) =>\n        resolveAfter(2000).then(() => {\n          console.log(\"values\", values);\n\n          toast({\n            title: \"Submission succeeded\",\n            status: \"success\",\n            duration: 5000,\n            isClosable: true,\n          });\n        }),\n      (errors) => {\n        console.log(\"errors\", errors);\n\n        toast({\n          title: \"Submission failed\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n        });\n      },\n    );\n  };\n\n  return (\n    <Page\n      title=\"Async submission\"\n      description=\"Even if we do not recommend preventing the submission of the form until all the values in it are valid (which is a bad UX practice), the library still handle async submission just fine ðŸ”¥.\"\n    >\n      <form onSubmit={onSubmit}>\n        <Field name=\"emailAddress\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Input\n              label=\"Email address\"\n              validation=\"Must be valid\"\n              strategy=\"onSuccessOrBlur\"\n              placeholder=\"john.doe@example.org\"\n              error={error}\n              onBlur={onBlur}\n              onChangeText={onChange}\n              ref={ref}\n              valid={valid}\n              validating={validating}\n              value={value}\n            />\n          )}\n        </Field>\n\n        <Spacer height={4} />\n\n        <HStack justifyContent=\"flex-end\" spacing={3}>\n          <Button onClick={resetForm} width={100}>\n            Reset\n          </Button>\n\n          <Button\n            colorScheme=\"green\"\n            type=\"submit\"\n            onClick={onSubmit}\n            width={100}\n            disabled={formStatus === \"submitting\"}\n            isLoading={formStatus === \"submitting\"}\n          >\n            Submit\n          </Button>\n        </HStack>\n      </form>\n    </Page>\n  );\n};\n","import { Button } from \"@chakra-ui/button\";\nimport { Code, HStack, Spacer } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport * as React from \"react\";\nimport { useForm } from \"react-ux-form\";\nimport validator from \"validator\";\nimport { Input } from \"../components/Input\";\nimport { Page } from \"../components/Page\";\nimport { resolveAfter } from \"../utils/promises\";\n\nexport const AsyncValidationForm = () => {\n  const { Field, resetForm, submitForm } = useForm({\n    emailAddress: {\n      strategy: \"onChange\",\n      initialValue: \"\",\n      debounceInterval: 250,\n      sanitize: (value) => value.trim(),\n      validate: (value) =>\n        resolveAfter(1000, !validator.isEmail(value) ? \"A valid email is required\" : undefined),\n    },\n  });\n\n  const toast = useToast();\n\n  const onSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    submitForm(\n      (values) => {\n        console.log(\"values\", values);\n\n        toast({\n          title: \"Submission succeeded\",\n          status: \"success\",\n          duration: 5000,\n          isClosable: true,\n        });\n      },\n      (errors) => {\n        console.log(\"errors\", errors);\n\n        toast({\n          title: \"Submission failed\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n        });\n      },\n    );\n  };\n\n  return (\n    <Page\n      title=\"Async validation\"\n      description={\n        <>\n          Validation will be triggered on each keystroke, <Code>debounceInterval</Code> is set to{\" \"}\n          <Code>250</Code> (ms).\n        </>\n      }\n    >\n      <form onSubmit={onSubmit}>\n        <Field name=\"emailAddress\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Input\n              label=\"Email address\"\n              validation=\"Must be valid\"\n              strategy=\"onChange\"\n              placeholder=\"john.doe@example.org\"\n              error={error}\n              onBlur={onBlur}\n              onChangeText={onChange}\n              ref={ref}\n              valid={valid}\n              validating={validating}\n              value={value}\n            />\n          )}\n        </Field>\n\n        <Spacer height={4} />\n\n        <HStack justifyContent=\"flex-end\" spacing={3}>\n          <Button onClick={resetForm} width={100}>\n            Reset\n          </Button>\n\n          <Button colorScheme=\"green\" type=\"submit\" onClick={onSubmit} width={100}>\n            Submit\n          </Button>\n        </HStack>\n      </form>\n    </Page>\n  );\n};\n","import { Button } from \"@chakra-ui/button\";\nimport { HStack, Spacer } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport * as React from \"react\";\nimport { useForm } from \"react-ux-form\";\nimport validator from \"validator\";\nimport { Input } from \"../components/Input\";\nimport { Page } from \"../components/Page\";\n\nexport const BasicForm = () => {\n  const { Field, resetForm, submitForm } = useForm({\n    firstName: {\n      strategy: \"onBlur\",\n      initialValue: \"\",\n      sanitize: (value) => value.trim(),\n      validate: (value) => {\n        if (value === \"\") {\n          return \"First name is required\";\n        }\n      },\n    },\n    lastName: {\n      strategy: \"onBlur\",\n      initialValue: \"\",\n      sanitize: (value) => value.trim(),\n      validate: (value) => {\n        if (value === \"\") {\n          return \"Last name is required\";\n        }\n      },\n    },\n    emailAddress: {\n      strategy: \"onSuccessOrBlur\",\n      initialValue: \"\",\n      sanitize: (value) => value.trim(),\n      validate: (value) => {\n        if (!validator.isEmail(value)) {\n          return \"A valid email is required\";\n        }\n      },\n    },\n  });\n\n  const toast = useToast();\n\n  const onSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    submitForm(\n      (values) => {\n        console.log(\"values\", values);\n\n        toast({\n          title: \"Submission succeeded\",\n          status: \"success\",\n          duration: 5000,\n          isClosable: true,\n        });\n      },\n      (errors) => {\n        console.log(\"errors\", errors);\n\n        toast({\n          title: \"Submission failed\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n        });\n      },\n    );\n  };\n\n  return (\n    <Page\n      title=\"Basic\"\n      description={\n        <>\n          A common form example which play with at least two different strategies.\n          <br />\n          Note that all values are sanitized using trimming.\n        </>\n      }\n    >\n      <form onSubmit={onSubmit}>\n        <Field name=\"firstName\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Input\n              label=\"First name\"\n              validation=\"Required\"\n              strategy=\"onBlur\"\n              placeholder=\"John\"\n              error={error}\n              onBlur={onBlur}\n              onChangeText={onChange}\n              ref={ref}\n              valid={valid}\n              validating={validating}\n              value={value}\n            />\n          )}\n        </Field>\n\n        <Field name=\"lastName\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Input\n              label=\"Last name\"\n              validation=\"Required\"\n              strategy=\"onBlur\"\n              placeholder=\"Doe\"\n              error={error}\n              onBlur={onBlur}\n              onChangeText={onChange}\n              ref={ref}\n              valid={valid}\n              validating={validating}\n              value={value}\n            />\n          )}\n        </Field>\n\n        <Field name=\"emailAddress\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Input\n              label=\"Email address\"\n              validation=\"Must be valid\"\n              strategy=\"onSuccessOrBlur\"\n              placeholder=\"john.doe@example.org\"\n              error={error}\n              onBlur={onBlur}\n              onChangeText={onChange}\n              ref={ref}\n              valid={valid}\n              validating={validating}\n              value={value}\n            />\n          )}\n        </Field>\n\n        <Spacer height={4} />\n\n        <HStack justifyContent=\"flex-end\" spacing={3}>\n          <Button onClick={resetForm} width={100}>\n            Reset\n          </Button>\n\n          <Button colorScheme=\"green\" type=\"submit\" onClick={onSubmit} width={100}>\n            Submit\n          </Button>\n        </HStack>\n      </form>\n    </Page>\n  );\n};\n","import { Button } from \"@chakra-ui/button\";\nimport { Checkbox } from \"@chakra-ui/checkbox\";\nimport { Code, HStack, Spacer } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport * as React from \"react\";\nimport { useForm } from \"react-ux-form\";\nimport { Page } from \"../components/Page\";\n\nexport const CheckboxesForm = () => {\n  const { Field, resetForm, submitForm } = useForm({\n    termsAndConditions: {\n      strategy: \"onChange\",\n      initialValue: false,\n      validate: (value) => {\n        if (!value) {\n          return \"You must accept terms and conditions\";\n        }\n      },\n    },\n    emailsFromPartners: {\n      strategy: \"onChange\",\n      initialValue: false,\n      validate: (value) => {\n        if (!value) {\n          return \"You must accept to receive email from partners\";\n        }\n      },\n    },\n  });\n\n  const toast = useToast();\n\n  const onSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    submitForm(\n      (values) => {\n        console.log(\"values\", values);\n\n        toast({\n          title: \"Submission succeeded\",\n          status: \"success\",\n          duration: 5000,\n          isClosable: true,\n        });\n      },\n      (errors) => {\n        console.log(\"errors\", errors);\n\n        toast({\n          title: \"Submission failed\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n        });\n      },\n    );\n  };\n\n  return (\n    <Page\n      title=\"Checkboxes\"\n      description={\n        <>\n          Checkboxes that must be ticked are a great use-case for <Code>onChange</Code> validation\n          strategy.\n        </>\n      }\n    >\n      <form onSubmit={onSubmit}>\n        <Field name=\"termsAndConditions\">\n          {({ error, onChange, value }) => (\n            <Checkbox\n              display=\"flex\"\n              isInvalid={error != null}\n              isChecked={value}\n              onChange={(e) => onChange(e.target.checked)}\n              color=\"gray.600\"\n            >\n              Accept terms and conditions\n            </Checkbox>\n          )}\n        </Field>\n\n        <Spacer height={1} />\n\n        <Field name=\"emailsFromPartners\">\n          {({ error, onChange, value }) => (\n            <Checkbox\n              display=\"flex\"\n              isInvalid={error != null}\n              isChecked={value}\n              onChange={(e) => onChange(e.target.checked)}\n              color=\"gray.600\"\n            >\n              Receive emails from partners\n            </Checkbox>\n          )}\n        </Field>\n\n        <Spacer height={12} />\n\n        <HStack justifyContent=\"flex-end\" spacing={3}>\n          <Button onClick={resetForm} width={100}>\n            Reset\n          </Button>\n\n          <Button colorScheme=\"green\" type=\"submit\" onClick={onSubmit} width={100}>\n            Submit\n          </Button>\n        </HStack>\n      </form>\n    </Page>\n  );\n};\n","import { Button } from \"@chakra-ui/button\";\nimport { ExternalLinkIcon } from \"@chakra-ui/icons\";\nimport { HStack, Spacer } from \"@chakra-ui/layout\";\nimport { Link } from \"@chakra-ui/react\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport cardValidator from \"card-validator\";\nimport * as React from \"react\";\nimport { useForm } from \"react-ux-form\";\nimport { Input } from \"../components/Input\";\nimport { Page } from \"../components/Page\";\n\nexport const CreditCardForm = () => {\n  const { Field, resetForm, submitForm } = useForm({\n    cardNumber: {\n      strategy: \"onSuccessOrBlur\",\n      initialValue: \"\",\n      sanitize: (value) => value.trim(),\n      validate: (value) => {\n        if (!cardValidator.number(value).isValid) {\n          return \"Card number is invalid\";\n        }\n      },\n    },\n    expirationDate: {\n      strategy: \"onSuccessOrBlur\",\n      initialValue: \"\",\n      sanitize: (value) => value.trim(),\n      validate: (value) => {\n        if (!cardValidator.expirationDate(value).isValid) {\n          return \"Expiration date is invalid\";\n        }\n      },\n    },\n    cvc: {\n      strategy: \"onSuccessOrBlur\",\n      initialValue: \"\",\n      sanitize: (value) => value.trim(),\n      validate: (value) => {\n        if (!cardValidator.cvv(value).isValid) {\n          return \"CVC should have 3 characters\";\n        }\n      },\n    },\n  });\n\n  const toast = useToast();\n\n  const onSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    submitForm(\n      (values) => {\n        console.log(\"values\", values);\n\n        toast({\n          title: \"Submission succeeded\",\n          status: \"success\",\n          duration: 5000,\n          isClosable: true,\n        });\n      },\n      (errors) => {\n        console.log(\"errors\", errors);\n\n        toast({\n          title: \"Submission failed\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n        });\n      },\n    );\n  };\n\n  return (\n    <Page\n      title=\"Credit card\"\n      description={\n        <>\n          You can try it by yourself using random credit card numbers from{\" \"}\n          <Link\n            href=\"https://www.creditcardvalidator.org/generator\"\n            isExternal={true}\n            color=\"gray.600\"\n            fontWeight=\"medium\"\n          >\n            creditcardvalidator.org <ExternalLinkIcon marginTop={-1} />\n          </Link>\n          <br />\n          Validation is performed using{\" \"}\n          <Link\n            href=\"https://www.npmjs.com/package/card-validator\"\n            isExternal={true}\n            color=\"gray.600\"\n            fontWeight=\"medium\"\n          >\n            card-validator <ExternalLinkIcon marginTop={-1} />\n          </Link>\n        </>\n      }\n    >\n      <form onSubmit={onSubmit}>\n        <Field name=\"cardNumber\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Input\n              label=\"Card number\"\n              validation=\"Must be valid\"\n              placeholder=\"4242424242424242\"\n              strategy=\"onSuccessOrBlur\"\n              error={error}\n              onBlur={onBlur}\n              onChangeText={onChange}\n              ref={ref}\n              valid={valid}\n              validating={validating}\n              value={value}\n            />\n          )}\n        </Field>\n\n        <Field name=\"expirationDate\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Input\n              label=\"Expiration date\"\n              validation=\"Must be valid\"\n              placeholder=\"01/28\"\n              strategy=\"onSuccessOrBlur\"\n              error={error}\n              onBlur={onBlur}\n              onChangeText={onChange}\n              ref={ref}\n              valid={valid}\n              validating={validating}\n              value={value}\n            />\n          )}\n        </Field>\n\n        <Field name=\"cvc\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Input\n              label=\"CVC\"\n              validation=\"Must be valid\"\n              placeholder=\"123\"\n              strategy=\"onSuccessOrBlur\"\n              error={error}\n              onBlur={onBlur}\n              onChangeText={onChange}\n              ref={ref}\n              valid={valid}\n              validating={validating}\n              value={value}\n            />\n          )}\n        </Field>\n\n        <Spacer height={4} />\n\n        <HStack justifyContent=\"flex-end\" spacing={3}>\n          <Button onClick={resetForm} width={100}>\n            Reset\n          </Button>\n\n          <Button colorScheme=\"green\" type=\"submit\" onClick={onSubmit} width={100}>\n            Submit\n          </Button>\n        </HStack>\n      </form>\n    </Page>\n  );\n};\n","import { Button } from \"@chakra-ui/button\";\nimport { Code, HStack, Spacer } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport * as React from \"react\";\nimport { useForm } from \"react-ux-form\";\nimport validator from \"validator\";\nimport { Input } from \"../components/Input\";\nimport { Page } from \"../components/Page\";\n\nexport const FieldsListenerForm = () => {\n  const { Field, FieldsListener, resetForm, submitForm } = useForm({\n    firstName: {\n      strategy: \"onBlur\",\n      initialValue: \"\",\n      sanitize: (value) => value.trim(),\n      validate: (value) => {\n        if (value === \"\") {\n          return \"First name is required\";\n        }\n      },\n    },\n    lastName: {\n      strategy: \"onBlur\",\n      initialValue: \"\",\n      sanitize: (value) => value.trim(),\n      validate: (value) => {\n        if (value === \"\") {\n          return \"Last name is required\";\n        }\n      },\n    },\n    emailAddress: {\n      strategy: \"onSuccessOrBlur\",\n      initialValue: \"\",\n      sanitize: (value) => value.trim(),\n      validate: (value) => {\n        if (!validator.isEmail(value)) {\n          return \"A valid email is required\";\n        }\n      },\n    },\n  });\n\n  const toast = useToast();\n\n  const onSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    submitForm(\n      (values) => {\n        console.log(\"values\", values);\n\n        toast({\n          title: \"Submission succeeded\",\n          status: \"success\",\n          duration: 5000,\n          isClosable: true,\n        });\n      },\n      (errors) => {\n        console.log(\"errors\", errors);\n\n        toast({\n          title: \"Submission failed\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n        });\n      },\n    );\n  };\n\n  return (\n    <Page\n      title=\"Fields listener\"\n      description={\n        <>\n          Using <Code>listenFields</Code> and the <Code>{\"<FieldsListener />\"}</Code> component,\n          it's really easy to synchronise components states and perform side-effects several fields\n          values changes.\n        </>\n      }\n    >\n      <FieldsListener names={[\"firstName\", \"lastName\", \"emailAddress\"]}>\n        {(states) => (\n          <pre\n            style={{\n              backgroundColor: \"#fafafa\",\n              borderRadius: 6,\n              borderWidth: 1,\n              fontSize: 14,\n              padding: 12,\n            }}\n          >\n            {JSON.stringify(states, null, 2)}\n          </pre>\n        )}\n      </FieldsListener>\n\n      <Spacer height={8} />\n\n      <form onSubmit={onSubmit}>\n        <Field name=\"firstName\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Input\n              label=\"First name\"\n              validation=\"Required\"\n              strategy=\"onBlur\"\n              placeholder=\"John\"\n              error={error}\n              onBlur={onBlur}\n              onChangeText={onChange}\n              ref={ref}\n              valid={valid}\n              validating={validating}\n              value={value}\n            />\n          )}\n        </Field>\n\n        <Field name=\"lastName\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Input\n              label=\"Last name\"\n              validation=\"Required\"\n              strategy=\"onBlur\"\n              placeholder=\"Doe\"\n              error={error}\n              onBlur={onBlur}\n              onChangeText={onChange}\n              ref={ref}\n              valid={valid}\n              validating={validating}\n              value={value}\n            />\n          )}\n        </Field>\n\n        <Field name=\"emailAddress\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Input\n              label=\"Email address\"\n              validation=\"Must be valid\"\n              strategy=\"onSuccessOrBlur\"\n              placeholder=\"john.doe@example.org\"\n              error={error}\n              onBlur={onBlur}\n              onChangeText={onChange}\n              ref={ref}\n              valid={valid}\n              validating={validating}\n              value={value}\n            />\n          )}\n        </Field>\n\n        <Spacer height={4} />\n\n        <HStack justifyContent=\"flex-end\" spacing={3}>\n          <Button onClick={resetForm} width={100}>\n            Reset\n          </Button>\n\n          <Button colorScheme=\"green\" type=\"submit\" onClick={onSubmit} width={100}>\n            Submit\n          </Button>\n        </HStack>\n      </form>\n    </Page>\n  );\n};\n","import { Button } from \"@chakra-ui/button\";\nimport { ExternalLinkIcon } from \"@chakra-ui/icons\";\nimport { HStack, Spacer } from \"@chakra-ui/layout\";\nimport { Link } from \"@chakra-ui/react\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport * as React from \"react\";\nimport { useForm } from \"react-ux-form\";\nimport validator from \"validator\";\nimport { Input } from \"../components/Input\";\nimport { Page } from \"../components/Page\";\n\nexport const IBANForm = () => {\n  const { Field, resetForm, submitForm } = useForm({\n    iban: {\n      strategy: \"onSuccessOrBlur\",\n      initialValue: \"\",\n      sanitize: (value) => value.trim(),\n      validate: (value) => {\n        if (!validator.isIBAN(value)) {\n          return \"Value is not a valid IBAN\";\n        }\n      },\n    },\n  });\n\n  const toast = useToast();\n\n  const onSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    submitForm(\n      (values) => {\n        console.log(\"values\", values);\n\n        toast({\n          title: \"Submission succeeded\",\n          status: \"success\",\n          duration: 5000,\n          isClosable: true,\n        });\n      },\n      (errors) => {\n        console.log(\"errors\", errors);\n\n        toast({\n          title: \"Submission failed\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n        });\n      },\n    );\n  };\n\n  return (\n    <Page\n      title=\"IBAN\"\n      description={\n        <>\n          You can try it by yourself using random IBAN from{\" \"}\n          <Link href=\"http://randomiban.com\" isExternal={true} color=\"gray.600\" fontWeight=\"medium\">\n            randomiban.com <ExternalLinkIcon marginTop={-1} />\n          </Link>\n          <br />\n          Validation is performed using{\" \"}\n          <Link\n            href=\"https://www.npmjs.com/package/validator\"\n            isExternal={true}\n            color=\"gray.600\"\n            fontWeight=\"medium\"\n          >\n            validator <ExternalLinkIcon marginTop={-1} />\n          </Link>\n        </>\n      }\n    >\n      <form onSubmit={onSubmit}>\n        <Field name=\"iban\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Input\n              label=\"IBAN\"\n              validation=\"Must be valid\"\n              placeholder=\"FR2230003000403598356122X09\"\n              strategy=\"onSuccessOrBlur\"\n              error={error}\n              onBlur={onBlur}\n              onChangeText={onChange}\n              ref={ref}\n              valid={valid}\n              validating={validating}\n              value={value}\n            />\n          )}\n        </Field>\n\n        <Spacer height={4} />\n\n        <HStack justifyContent=\"flex-end\" spacing={3}>\n          <Button onClick={resetForm} width={100}>\n            Reset\n          </Button>\n\n          <Button colorScheme=\"green\" type=\"submit\" onClick={onSubmit} width={100}>\n            Submit\n          </Button>\n        </HStack>\n      </form>\n    </Page>\n  );\n};\n","import { Button } from \"@chakra-ui/button\";\nimport { ExternalLinkIcon } from \"@chakra-ui/icons\";\nimport { HStack, Spacer } from \"@chakra-ui/layout\";\nimport { Link } from \"@chakra-ui/react\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport cardValidator from \"card-validator\";\nimport * as React from \"react\";\nimport { useForm } from \"react-ux-form\";\nimport { Rifm } from \"rifm\";\nimport { Input } from \"../components/Input\";\nimport { Page } from \"../components/Page\";\n\nconst formatCardNumber = (string: string) => {\n  const digits = (string.match(/\\d+/g) || []).join(\"\");\n  const chars = digits.split(\"\");\n\n  const res = chars\n    .reduce(\n      (acc, char, index) => ([4, 8, 12, 16].includes(index) ? `${acc} ${char}` : `${acc}${char}`),\n      \"\",\n    )\n    .substr(0, 19);\n\n  return string.endsWith(\" \") && [4, 9, 14, 19].includes(res.length) ? `${res} ` : res;\n};\n\nconst appendSpace = (res: string) => ([4, 9, 14].includes(res.length) ? `${res} ` : res);\n\nexport const InputMaskingForm = () => {\n  const { Field, resetForm, submitForm } = useForm({\n    cardNumber: {\n      strategy: \"onSuccessOrBlur\",\n      initialValue: \"\",\n      sanitize: (value) => value.trim(),\n      validate: (value) => {\n        if (!cardValidator.number(value).isValid) {\n          return \"Card number is invalid\";\n        }\n      },\n    },\n  });\n\n  const toast = useToast();\n\n  const onSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    submitForm(\n      (values) => {\n        console.log(\"values\", values);\n\n        toast({\n          title: \"Submission succeeded\",\n          status: \"success\",\n          duration: 5000,\n          isClosable: true,\n        });\n      },\n      (errors) => {\n        console.log(\"errors\", errors);\n\n        toast({\n          title: \"Submission failed\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n        });\n      },\n    );\n  };\n\n  return (\n    <Page\n      title=\"Input masking\"\n      description={\n        <>\n          You can try it by yourself using random credit card numbers from{\" \"}\n          <Link\n            href=\"https://www.creditcardvalidator.org/generator\"\n            isExternal={true}\n            color=\"gray.600\"\n            fontWeight=\"medium\"\n          >\n            creditcardvalidator.org <ExternalLinkIcon marginTop={-1} />\n          </Link>\n          <br />\n          Validation is performed using{\" \"}\n          <Link\n            href=\"https://www.npmjs.com/package/card-validator\"\n            isExternal={true}\n            color=\"gray.600\"\n            fontWeight=\"medium\"\n          >\n            card-validator <ExternalLinkIcon marginTop={-1} />\n          </Link>\n        </>\n      }\n    >\n      <form onSubmit={onSubmit}>\n        <Field name=\"cardNumber\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Rifm\n              accept={/\\d+/g}\n              mask={19 <= value.length}\n              format={formatCardNumber}\n              value={value}\n              onChange={onChange}\n              append={appendSpace}\n            >\n              {({ value, onChange }) => (\n                <Input\n                  label=\"Card number\"\n                  validation=\"Must be valid\"\n                  placeholder=\"4242 4242 4242 4242\"\n                  strategy=\"onSuccessOrBlur\"\n                  error={error}\n                  onBlur={onBlur}\n                  onChange={onChange}\n                  ref={ref}\n                  valid={valid}\n                  validating={validating}\n                  value={value}\n                />\n              )}\n            </Rifm>\n          )}\n        </Field>\n\n        <Spacer height={4} />\n\n        <HStack justifyContent=\"flex-end\" spacing={3}>\n          <Button onClick={resetForm} width={100}>\n            Reset\n          </Button>\n\n          <Button colorScheme=\"green\" type=\"submit\" onClick={onSubmit} width={100}>\n            Submit\n          </Button>\n        </HStack>\n      </form>\n    </Page>\n  );\n};\n","import { Button } from \"@chakra-ui/button\";\nimport { HStack, Spacer } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport * as React from \"react\";\nimport { useForm } from \"react-ux-form\";\nimport { Input } from \"../components/Input\";\nimport { Page } from \"../components/Page\";\n\nconst sanitize = (value: string) => value.trim();\nconst validate = (value: string) => {\n  if (value.length < 3) {\n    return \"Must be at least 3 characters\";\n  }\n};\n\nexport const StrategiesForm = () => {\n  const { Field, resetForm, submitForm } = useForm({\n    onChange: {\n      strategy: \"onChange\",\n      initialValue: \"\",\n      sanitize,\n      validate,\n    },\n    onSuccess: {\n      strategy: \"onSuccess\",\n      initialValue: \"\",\n      sanitize,\n      validate,\n    },\n    onBlur: {\n      strategy: \"onBlur\",\n      initialValue: \"\",\n      sanitize,\n      validate,\n    },\n    onSuccessOrBlur: {\n      strategy: \"onSuccessOrBlur\",\n      initialValue: \"\",\n      sanitize,\n      validate,\n    },\n    onSubmit: {\n      strategy: \"onSubmit\",\n      initialValue: \"\",\n      sanitize,\n      validate,\n    },\n  });\n\n  const toast = useToast();\n\n  const onSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    submitForm(\n      (values) => {\n        console.log(\"values\", values);\n\n        toast({\n          title: \"Submission succeeded\",\n          status: \"success\",\n          duration: 5000,\n          isClosable: true,\n        });\n      },\n      (errors) => {\n        console.log(\"errors\", errors);\n\n        toast({\n          title: \"Submission failed\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n        });\n      },\n    );\n  };\n\n  return (\n    <Page\n      title=\"Validation strategies\"\n      description=\"All these fields use the same sanitization rules (the value is trimmed), the same validation rule (the value must be at least 3 characters long) but different validation strategies, so you can easily play with each.\"\n    >\n      <form onSubmit={onSubmit}>\n        <Field name=\"onChange\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Input\n              label=\"onChange\"\n              validation=\"Must be at least 3 characters long\"\n              strategy=\"onChange\"\n              placeholder=\"â€¦\"\n              error={error}\n              onBlur={onBlur}\n              onChangeText={onChange}\n              ref={ref}\n              valid={valid}\n              validating={validating}\n              value={value}\n            />\n          )}\n        </Field>\n\n        <Field name=\"onSuccess\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Input\n              label=\"onSuccess\"\n              validation=\"Must be at least 3 characters long\"\n              strategy=\"onSuccess\"\n              placeholder=\"â€¦\"\n              error={error}\n              onBlur={onBlur}\n              onChangeText={onChange}\n              ref={ref}\n              valid={valid}\n              validating={validating}\n              value={value}\n            />\n          )}\n        </Field>\n\n        <Field name=\"onBlur\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Input\n              label=\"onBlur\"\n              validation=\"Must be at least 3 characters long\"\n              strategy=\"onBlur\"\n              placeholder=\"â€¦\"\n              error={error}\n              onBlur={onBlur}\n              onChangeText={onChange}\n              ref={ref}\n              valid={valid}\n              validating={validating}\n              value={value}\n            />\n          )}\n        </Field>\n\n        <Field name=\"onSuccessOrBlur\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Input\n              label=\"onSuccessOrBlur (default)\"\n              validation=\"Must be at least 3 characters long\"\n              strategy=\"onSuccessOrBlur\"\n              placeholder=\"â€¦\"\n              error={error}\n              onBlur={onBlur}\n              onChangeText={onChange}\n              ref={ref}\n              valid={valid}\n              validating={validating}\n              value={value}\n            />\n          )}\n        </Field>\n\n        <Field name=\"onSubmit\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Input\n              label=\"onSubmit\"\n              validation=\"Must be at least 3 characters long\"\n              strategy=\"onSubmit\"\n              placeholder=\"â€¦\"\n              error={error}\n              onBlur={onBlur}\n              onChangeText={onChange}\n              ref={ref}\n              valid={valid}\n              validating={validating}\n              value={value}\n            />\n          )}\n        </Field>\n\n        <Spacer height={4} />\n\n        <HStack justifyContent=\"flex-end\" spacing={3}>\n          <Button onClick={resetForm} width={100}>\n            Reset\n          </Button>\n\n          <Button colorScheme=\"green\" type=\"submit\" onClick={onSubmit} width={100}>\n            Submit\n          </Button>\n        </HStack>\n      </form>\n    </Page>\n  );\n};\n","import { Button } from \"@chakra-ui/button\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { HamburgerIcon } from \"@chakra-ui/icons\";\nimport { Flex, Text, VStack } from \"@chakra-ui/layout\";\nimport { useBreakpointValue } from \"@chakra-ui/media-query\";\nimport * as React from \"react\";\nimport { Route, Router, useLocation } from \"wouter\";\nimport { Link } from \"./components/Link\";\nimport { AsyncSubmissionForm } from \"./forms/AsyncSubmissionForm\";\nimport { AsyncValidationForm } from \"./forms/AsyncValidationForm\";\nimport { BasicForm } from \"./forms/BasicForm\";\nimport { CheckboxesForm } from \"./forms/CheckboxesForm\";\nimport { CreditCardForm } from \"./forms/CreditCardForm\";\nimport { FieldsListenerForm } from \"./forms/FieldsListenerForm\";\nimport { IBANForm } from \"./forms/IBANForm\";\nimport { InputMaskingForm } from \"./forms/InputMaskingForm\";\nimport { StrategiesForm } from \"./forms/StrategiesForm\";\n\nexport const App = () => {\n  const [path] = useLocation();\n  const isDesktop = !useBreakpointValue({ base: true, md: false });\n  const { isOpen, onToggle, onClose } = useDisclosure();\n\n  React.useEffect(onClose, [path]);\n\n  return (\n    <Router base=\"/react-ux-form\">\n      <Flex flex={1} flexDirection={{ base: \"column-reverse\", md: \"row\" }}>\n        <Button\n          borderRadius={0}\n          display={{ base: \"flex\", md: \"none\" }}\n          flexShrink={0}\n          fontSize={14}\n          height=\"48px\"\n          onClick={onToggle}\n        >\n          <HamburgerIcon height={5} width={5} marginRight={2} />\n          MENU\n        </Button>\n\n        {(isDesktop || isOpen) && (\n          <Flex\n            backgroundColor=\"gray.50\"\n            flexDirection=\"column\"\n            overflowY=\"scroll\"\n            paddingTop={6}\n            paddingBottom={6}\n            paddingLeft={4}\n            paddingRight={4}\n            borderColor=\"gray.100\"\n            borderStyle=\"solid\"\n            borderTopWidth={{ base: 1, md: 0 }}\n            borderRightWidth={{ base: 0, md: 1 }}\n            flexShrink={0}\n            height={{ base: \"40%\", md: \"auto\" }}\n            width={{ base: \"auto\", md: 320 }}\n          >\n            <Text\n              color=\"gray.500\"\n              fontSize={12}\n              fontWeight={600}\n              marginLeft={3}\n              marginBottom={3}\n              textTransform=\"uppercase\"\n            >\n              Examples\n            </Text>\n\n            <VStack align=\"initial\" spacing={1}>\n              <Link href=\"/\">Basic</Link>\n              <Link href=\"/strategies\">Validation strategies</Link>\n              <Link href=\"/fields-listener\">Fields listener</Link>\n              <Link href=\"/async-validation\">Async validation</Link>\n              <Link href=\"/async-submission\">Async submission</Link>\n              <Link href=\"/checkboxes\">Checkboxes</Link>\n              <Link href=\"/iban\">IBAN</Link>\n              <Link href=\"/credit-card\">Credit card</Link>\n              <Link href=\"/input-masking\">Input masking</Link>\n            </VStack>\n          </Flex>\n        )}\n\n        <Route path=\"/\" component={BasicForm} />\n        <Route path=\"/strategies\" component={StrategiesForm} />\n        <Route path=\"/fields-listener\" component={FieldsListenerForm} />\n        <Route path=\"/async-validation\" component={AsyncValidationForm} />\n        <Route path=\"/async-submission\" component={AsyncSubmissionForm} />\n        <Route path=\"/checkboxes\" component={CheckboxesForm} />\n        <Route path=\"/iban\" component={IBANForm} />\n        <Route path=\"/credit-card\" component={CreditCardForm} />\n        <Route path=\"/input-masking\" component={InputMaskingForm} />\n      </Flex>\n    </Router>\n  );\n};\n","import { ChakraProvider } from \"@chakra-ui/react\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\n\nReactDOM.render(\n  <ChakraProvider>\n    <App />\n  </ChakraProvider>,\n  document.getElementById(\"root\"),\n);\n"],"names":["WouterLink","React.forwardRef","ChakraInput","useForm","cardValidator","Link","ReactDOM.render"],"mappings":"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"}