{"version":3,"file":"index.73e2f481.js","sources":["../../vite/modulepreload-polyfill","../../src/components/Link.tsx","../../src/components/Input.tsx","../../src/components/Page.tsx","../../src/utils/promises.ts","../../src/forms/AsyncSubmissionForm.tsx","../../src/forms/AsyncValidationForm.tsx","../../src/forms/BasicForm.tsx","../../src/forms/CheckboxesForm.tsx","../../src/forms/CreditCardForm.tsx","../../src/forms/FieldsListenerForm.tsx","../../src/forms/IBANForm.tsx","../../src/forms/InputMaskingForm.tsx","../../src/forms/StrategiesForm.tsx","../../src/App.tsx","../../src/index.tsx"],"sourcesContent":["const p = function polyfill() {\n    const relList = document.createElement('link').relList;\n    if (relList && relList.supports && relList.supports('modulepreload')) {\n        return;\n    }\n    for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n        processPreload(link);\n    }\n    new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type !== 'childList') {\n                continue;\n            }\n            for (const node of mutation.addedNodes) {\n                if (node.tagName === 'LINK' && node.rel === 'modulepreload')\n                    processPreload(node);\n            }\n        }\n    }).observe(document, { childList: true, subtree: true });\n    function getFetchOpts(script) {\n        const fetchOpts = {};\n        if (script.integrity)\n            fetchOpts.integrity = script.integrity;\n        if (script.referrerpolicy)\n            fetchOpts.referrerPolicy = script.referrerpolicy;\n        if (script.crossorigin === 'use-credentials')\n            fetchOpts.credentials = 'include';\n        else if (script.crossorigin === 'anonymous')\n            fetchOpts.credentials = 'omit';\n        else\n            fetchOpts.credentials = 'same-origin';\n        return fetchOpts;\n    }\n    function processPreload(link) {\n        if (link.ep)\n            // ep marker = processed\n            return;\n        link.ep = true;\n        // prepopulate the load record\n        const fetchOpts = getFetchOpts(link);\n        fetch(link.href, fetchOpts);\n    }\n};__VITE_IS_MODERN__&&p();","import { useTheme } from \"@chakra-ui/system\";\nimport * as React from \"react\";\nimport { Link as WouterLink, LinkProps, useRoute } from \"wouter\";\n\nexport const Link = (props: LinkProps & { href: string }) => {\n  const { colors } = useTheme();\n  const [active] = useRoute(props.href);\n\n  return (\n    <WouterLink\n      {...props}\n      style={{\n        borderRadius: 4,\n        color: colors.gray[600],\n        display: \"flex\",\n        flexGrow: 1,\n        fontWeight: 500,\n        paddingBottom: 5,\n        paddingLeft: 12,\n        paddingRight: 12,\n        paddingTop: 5,\n        ...(active && {\n          backgroundColor: colors.green[100],\n          color: colors.green[700],\n        }),\n      }}\n    />\n  );\n};\n","import { FormLabel } from \"@chakra-ui/form-control\";\nimport { useId } from \"@chakra-ui/hooks\";\nimport { CheckIcon, WarningIcon } from \"@chakra-ui/icons\";\nimport { Input as ChakraInput, InputGroup, InputProps, InputRightElement } from \"@chakra-ui/input\";\nimport { Box, Flex, Spacer, Text } from \"@chakra-ui/layout\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport * as React from \"react\";\nimport { Strategy } from \"react-ux-form\";\n\ntype Props = {\n  error?: string;\n  label: string;\n  onBlur: () => void;\n  validation?: string;\n  strategy: Strategy;\n  placeholder?: string;\n  onChange?: InputProps[\"onChange\"];\n  onChangeText?: (text: string) => void;\n  valid: boolean;\n  validating: boolean;\n  value: string;\n};\n\nexport const Input = React.forwardRef<HTMLInputElement, Props>(\n  (\n    {\n      error,\n      label,\n      onBlur,\n      validation,\n      strategy,\n      placeholder,\n      onChange,\n      onChangeText,\n      valid,\n      validating,\n      value,\n    },\n    forwardedRef,\n  ) => {\n    const id = useId();\n\n    return (\n      <Box>\n        <FormLabel htmlFor={id} marginBottom={0}>\n          {label}\n        </FormLabel>\n\n        <Flex flexDirection=\"row\" marginBottom={2} alignItems=\"center\">\n          <Text color=\"gray.400\" fontSize={14} fontWeight=\"medium\">\n            {validation}\n          </Text>\n\n          <Spacer width={2} />\n\n          <Text color=\"gray.500\" fontSize={12} fontWeight=\"medium\">\n            {strategy}Â âœ¨\n          </Text>\n        </Flex>\n\n        <InputGroup>\n          <ChakraInput\n            id={id}\n            ref={forwardedRef}\n            error={error}\n            onBlur={onBlur}\n            placeholder={placeholder}\n            value={value}\n            isInvalid={error != null}\n            onChange={(e) => {\n              onChange?.(e);\n              onChangeText?.(e.target.value);\n            }}\n          />\n\n          {valid && (\n            <InputRightElement>\n              <CheckIcon color=\"green.500\" />\n            </InputRightElement>\n          )}\n\n          {validating && (\n            <InputRightElement>\n              <Spinner color=\"blue.500\" size=\"sm\" />\n            </InputRightElement>\n          )}\n\n          {error != null && (\n            <InputRightElement>\n              <WarningIcon color=\"red.500\" />\n            </InputRightElement>\n          )}\n        </InputGroup>\n\n        <Box height={8}>\n          <Spacer height={1} />\n\n          {error != null && (\n            <Text color=\"red.500\" fontWeight={500} fontSize={14}>\n              {error}\n            </Text>\n          )}\n        </Box>\n      </Box>\n    );\n  },\n);\n","import { Flex, Heading, Spacer, Text } from \"@chakra-ui/layout\";\nimport * as React from \"react\";\n\nexport const Page = ({\n  children,\n  title,\n  description,\n}: {\n  children: React.ReactNode;\n  title: string;\n  description?: React.ReactNode;\n}) => (\n  <Flex\n    flexDirection=\"column\"\n    flexGrow={1}\n    flexShrink={1}\n    overflowY=\"scroll\"\n    paddingTop={{ base: 6, md: 8 }}\n    paddingBottom={{ base: 6, md: 8 }}\n    paddingLeft={{ base: 5, md: 10 }}\n    paddingRight={{ base: 5, md: 10 }}\n  >\n    <main style={{ maxWidth: 768 }}>\n      <Heading>{title}</Heading>\n\n      {description ? (\n        <>\n          <Spacer height={4} />\n          <Text color=\"gray.500\">{description}</Text>\n          <Spacer height={12} />\n        </>\n      ) : (\n        <Spacer height={8} />\n      )}\n\n      {children}\n    </main>\n  </Flex>\n);\n","export const resolveAfter = <T>(delay: number, value?: T): Promise<T | void> =>\n  new Promise((resolve) => {\n    setTimeout(() => resolve(value), delay);\n  });\n\nexport const rejectAfter = <T>(delay: number, value?: T): Promise<T | void> =>\n  new Promise((_, reject) => {\n    setTimeout(() => reject(value), delay);\n  });\n","import { Button } from \"@chakra-ui/button\";\nimport { HStack, Spacer } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport * as React from \"react\";\nimport { useForm } from \"react-ux-form\";\nimport validator from \"validator\";\nimport { Input } from \"../components/Input\";\nimport { Page } from \"../components/Page\";\nimport { resolveAfter } from \"../utils/promises\";\n\nexport const AsyncSubmissionForm = () => {\n  const { Field, resetForm, submitForm, formStatus } = useForm({\n    emailAddress: {\n      strategy: \"onSuccessOrBlur\",\n      initialValue: \"\",\n      sanitize: (value) => value.trim(),\n      validate: (value) => {\n        if (!validator.isEmail(value)) {\n          return \"A valid email is required\";\n        }\n      },\n    },\n  });\n\n  const toast = useToast();\n\n  const onSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    submitForm(\n      (values) =>\n        resolveAfter(2000).then(() => {\n          console.log(\"values\", values);\n\n          toast({\n            title: \"Submission succeeded\",\n            status: \"success\",\n            duration: 5000,\n            isClosable: true,\n          });\n        }),\n      (errors) => {\n        console.log(\"errors\", errors);\n\n        toast({\n          title: \"Submission failed\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n        });\n      },\n    );\n  };\n\n  return (\n    <Page\n      title=\"Async submission\"\n      description=\"Even if we do not recommend preventing the submission of the form until all the values in it are valid (which is a bad UX practice), the library still handle async submission just fine ðŸ”¥.\"\n    >\n      <form onSubmit={onSubmit}>\n        <Field name=\"emailAddress\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Input\n              label=\"Email address\"\n              validation=\"Must be valid\"\n              strategy=\"onSuccessOrBlur\"\n              placeholder=\"john.doe@example.org\"\n              error={error}\n              onBlur={onBlur}\n              onChangeText={onChange}\n              ref={ref}\n              valid={valid}\n              validating={validating}\n              value={value}\n            />\n          )}\n        </Field>\n\n        <Spacer height={4} />\n\n        <HStack justifyContent=\"flex-end\" spacing={3}>\n          <Button onClick={resetForm} width={100}>\n            Reset\n          </Button>\n\n          <Button\n            colorScheme=\"green\"\n            type=\"submit\"\n            onClick={onSubmit}\n            width={100}\n            disabled={formStatus === \"submitting\"}\n            isLoading={formStatus === \"submitting\"}\n          >\n            Submit\n          </Button>\n        </HStack>\n      </form>\n    </Page>\n  );\n};\n","import { Button } from \"@chakra-ui/button\";\nimport { Code, HStack, Spacer } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport * as React from \"react\";\nimport { useForm } from \"react-ux-form\";\nimport validator from \"validator\";\nimport { Input } from \"../components/Input\";\nimport { Page } from \"../components/Page\";\nimport { resolveAfter } from \"../utils/promises\";\n\nexport const AsyncValidationForm = () => {\n  const { Field, resetForm, submitForm } = useForm({\n    emailAddress: {\n      strategy: \"onChange\",\n      initialValue: \"\",\n      debounceInterval: 250,\n      sanitize: (value) => value.trim(),\n      validate: (value) =>\n        resolveAfter(1000, !validator.isEmail(value) ? \"A valid email is required\" : undefined),\n    },\n  });\n\n  const toast = useToast();\n\n  const onSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    submitForm(\n      (values) => {\n        console.log(\"values\", values);\n\n        toast({\n          title: \"Submission succeeded\",\n          status: \"success\",\n          duration: 5000,\n          isClosable: true,\n        });\n      },\n      (errors) => {\n        console.log(\"errors\", errors);\n\n        toast({\n          title: \"Submission failed\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n        });\n      },\n    );\n  };\n\n  return (\n    <Page\n      title=\"Async validation\"\n      description={\n        <>\n          Validation will be triggered on each keystroke, <Code>debounceInterval</Code> is set to{\" \"}\n          <Code>250</Code> (ms).\n        </>\n      }\n    >\n      <form onSubmit={onSubmit}>\n        <Field name=\"emailAddress\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Input\n              label=\"Email address\"\n              validation=\"Must be valid\"\n              strategy=\"onChange\"\n              placeholder=\"john.doe@example.org\"\n              error={error}\n              onBlur={onBlur}\n              onChangeText={onChange}\n              ref={ref}\n              valid={valid}\n              validating={validating}\n              value={value}\n            />\n          )}\n        </Field>\n\n        <Spacer height={4} />\n\n        <HStack justifyContent=\"flex-end\" spacing={3}>\n          <Button onClick={resetForm} width={100}>\n            Reset\n          </Button>\n\n          <Button colorScheme=\"green\" type=\"submit\" onClick={onSubmit} width={100}>\n            Submit\n          </Button>\n        </HStack>\n      </form>\n    </Page>\n  );\n};\n","import { Button } from \"@chakra-ui/button\";\nimport { HStack, Spacer } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport * as React from \"react\";\nimport { useForm } from \"react-ux-form\";\nimport validator from \"validator\";\nimport { Input } from \"../components/Input\";\nimport { Page } from \"../components/Page\";\n\nexport const BasicForm = () => {\n  const { Field, resetForm, submitForm } = useForm({\n    firstName: {\n      strategy: \"onBlur\",\n      initialValue: \"\",\n      sanitize: (value) => value.trim(),\n      validate: (value) => {\n        if (value === \"\") {\n          return \"First name is required\";\n        }\n      },\n    },\n    lastName: {\n      strategy: \"onBlur\",\n      initialValue: \"\",\n      sanitize: (value) => value.trim(),\n      validate: (value) => {\n        if (value === \"\") {\n          return \"Last name is required\";\n        }\n      },\n    },\n    emailAddress: {\n      strategy: \"onSuccessOrBlur\",\n      initialValue: \"\",\n      sanitize: (value) => value.trim(),\n      validate: (value) => {\n        if (!validator.isEmail(value)) {\n          return \"A valid email is required\";\n        }\n      },\n    },\n  });\n\n  const toast = useToast();\n\n  const onSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    submitForm(\n      (values) => {\n        console.log(\"values\", values);\n\n        toast({\n          title: \"Submission succeeded\",\n          status: \"success\",\n          duration: 5000,\n          isClosable: true,\n        });\n      },\n      (errors) => {\n        console.log(\"errors\", errors);\n\n        toast({\n          title: \"Submission failed\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n        });\n      },\n    );\n  };\n\n  return (\n    <Page\n      title=\"Basic\"\n      description={\n        <>\n          A common form example which play with at least two different strategies.\n          <br />\n          Note that all values are sanitized using trimming.\n        </>\n      }\n    >\n      <form onSubmit={onSubmit}>\n        <Field name=\"firstName\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Input\n              label=\"First name\"\n              validation=\"Required\"\n              strategy=\"onBlur\"\n              placeholder=\"John\"\n              error={error}\n              onBlur={onBlur}\n              onChangeText={onChange}\n              ref={ref}\n              valid={valid}\n              validating={validating}\n              value={value}\n            />\n          )}\n        </Field>\n\n        <Field name=\"lastName\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Input\n              label=\"Last name\"\n              validation=\"Required\"\n              strategy=\"onBlur\"\n              placeholder=\"Doe\"\n              error={error}\n              onBlur={onBlur}\n              onChangeText={onChange}\n              ref={ref}\n              valid={valid}\n              validating={validating}\n              value={value}\n            />\n          )}\n        </Field>\n\n        <Field name=\"emailAddress\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Input\n              label=\"Email address\"\n              validation=\"Must be valid\"\n              strategy=\"onSuccessOrBlur\"\n              placeholder=\"john.doe@example.org\"\n              error={error}\n              onBlur={onBlur}\n              onChangeText={onChange}\n              ref={ref}\n              valid={valid}\n              validating={validating}\n              value={value}\n            />\n          )}\n        </Field>\n\n        <Spacer height={4} />\n\n        <HStack justifyContent=\"flex-end\" spacing={3}>\n          <Button onClick={resetForm} width={100}>\n            Reset\n          </Button>\n\n          <Button colorScheme=\"green\" type=\"submit\" onClick={onSubmit} width={100}>\n            Submit\n          </Button>\n        </HStack>\n      </form>\n    </Page>\n  );\n};\n","import { Button } from \"@chakra-ui/button\";\nimport { Checkbox } from \"@chakra-ui/checkbox\";\nimport { Code, HStack, Spacer } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport * as React from \"react\";\nimport { useForm } from \"react-ux-form\";\nimport { Page } from \"../components/Page\";\n\nexport const CheckboxesForm = () => {\n  const { Field, resetForm, submitForm } = useForm({\n    termsAndConditions: {\n      strategy: \"onChange\",\n      initialValue: false,\n      validate: (value) => {\n        if (!value) {\n          return \"You must accept terms and conditions\";\n        }\n      },\n    },\n    emailsFromPartners: {\n      strategy: \"onChange\",\n      initialValue: false,\n      validate: (value) => {\n        if (!value) {\n          return \"You must accept to receive email from partners\";\n        }\n      },\n    },\n  });\n\n  const toast = useToast();\n\n  const onSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    submitForm(\n      (values) => {\n        console.log(\"values\", values);\n\n        toast({\n          title: \"Submission succeeded\",\n          status: \"success\",\n          duration: 5000,\n          isClosable: true,\n        });\n      },\n      (errors) => {\n        console.log(\"errors\", errors);\n\n        toast({\n          title: \"Submission failed\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n        });\n      },\n    );\n  };\n\n  return (\n    <Page\n      title=\"Checkboxes\"\n      description={\n        <>\n          Checkboxes that must be ticked are a great use-case for <Code>onChange</Code> validation\n          strategy.\n        </>\n      }\n    >\n      <form onSubmit={onSubmit}>\n        <Field name=\"termsAndConditions\">\n          {({ error, onChange, value }) => (\n            <Checkbox\n              display=\"flex\"\n              isInvalid={error != null}\n              isChecked={value}\n              onChange={(e) => onChange(e.target.checked)}\n              color=\"gray.600\"\n            >\n              Accept terms and conditions\n            </Checkbox>\n          )}\n        </Field>\n\n        <Spacer height={1} />\n\n        <Field name=\"emailsFromPartners\">\n          {({ error, onChange, value }) => (\n            <Checkbox\n              display=\"flex\"\n              isInvalid={error != null}\n              isChecked={value}\n              onChange={(e) => onChange(e.target.checked)}\n              color=\"gray.600\"\n            >\n              Receive emails from partners\n            </Checkbox>\n          )}\n        </Field>\n\n        <Spacer height={12} />\n\n        <HStack justifyContent=\"flex-end\" spacing={3}>\n          <Button onClick={resetForm} width={100}>\n            Reset\n          </Button>\n\n          <Button colorScheme=\"green\" type=\"submit\" onClick={onSubmit} width={100}>\n            Submit\n          </Button>\n        </HStack>\n      </form>\n    </Page>\n  );\n};\n","import { Button } from \"@chakra-ui/button\";\nimport { ExternalLinkIcon } from \"@chakra-ui/icons\";\nimport { HStack, Spacer } from \"@chakra-ui/layout\";\nimport { Link } from \"@chakra-ui/react\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport cardValidator from \"card-validator\";\nimport * as React from \"react\";\nimport { useForm } from \"react-ux-form\";\nimport { Input } from \"../components/Input\";\nimport { Page } from \"../components/Page\";\n\nexport const CreditCardForm = () => {\n  const { Field, resetForm, submitForm } = useForm({\n    cardNumber: {\n      strategy: \"onSuccessOrBlur\",\n      initialValue: \"\",\n      sanitize: (value) => value.trim(),\n      validate: (value) => {\n        if (!cardValidator.number(value).isValid) {\n          return \"Card number is invalid\";\n        }\n      },\n    },\n    expirationDate: {\n      strategy: \"onSuccessOrBlur\",\n      initialValue: \"\",\n      sanitize: (value) => value.trim(),\n      validate: (value) => {\n        if (!cardValidator.expirationDate(value).isValid) {\n          return \"Expiration date is invalid\";\n        }\n      },\n    },\n    cvc: {\n      strategy: \"onSuccessOrBlur\",\n      initialValue: \"\",\n      sanitize: (value) => value.trim(),\n      validate: (value) => {\n        if (!cardValidator.cvv(value).isValid) {\n          return \"CVC should have 3 characters\";\n        }\n      },\n    },\n  });\n\n  const toast = useToast();\n\n  const onSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    submitForm(\n      (values) => {\n        console.log(\"values\", values);\n\n        toast({\n          title: \"Submission succeeded\",\n          status: \"success\",\n          duration: 5000,\n          isClosable: true,\n        });\n      },\n      (errors) => {\n        console.log(\"errors\", errors);\n\n        toast({\n          title: \"Submission failed\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n        });\n      },\n    );\n  };\n\n  return (\n    <Page\n      title=\"Credit card\"\n      description={\n        <>\n          You can try it by yourself using random credit card numbers from{\" \"}\n          <Link\n            href=\"https://www.creditcardvalidator.org/generator\"\n            isExternal={true}\n            color=\"gray.600\"\n            fontWeight=\"medium\"\n          >\n            creditcardvalidator.org <ExternalLinkIcon marginTop={-1} />\n          </Link>\n          <br />\n          Validation is performed using{\" \"}\n          <Link\n            href=\"https://www.npmjs.com/package/card-validator\"\n            isExternal={true}\n            color=\"gray.600\"\n            fontWeight=\"medium\"\n          >\n            card-validator <ExternalLinkIcon marginTop={-1} />\n          </Link>\n        </>\n      }\n    >\n      <form onSubmit={onSubmit}>\n        <Field name=\"cardNumber\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Input\n              label=\"Card number\"\n              validation=\"Must be valid\"\n              placeholder=\"4242424242424242\"\n              strategy=\"onSuccessOrBlur\"\n              error={error}\n              onBlur={onBlur}\n              onChangeText={onChange}\n              ref={ref}\n              valid={valid}\n              validating={validating}\n              value={value}\n            />\n          )}\n        </Field>\n\n        <Field name=\"expirationDate\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Input\n              label=\"Expiration date\"\n              validation=\"Must be valid\"\n              placeholder=\"01/28\"\n              strategy=\"onSuccessOrBlur\"\n              error={error}\n              onBlur={onBlur}\n              onChangeText={onChange}\n              ref={ref}\n              valid={valid}\n              validating={validating}\n              value={value}\n            />\n          )}\n        </Field>\n\n        <Field name=\"cvc\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Input\n              label=\"CVC\"\n              validation=\"Must be valid\"\n              placeholder=\"123\"\n              strategy=\"onSuccessOrBlur\"\n              error={error}\n              onBlur={onBlur}\n              onChangeText={onChange}\n              ref={ref}\n              valid={valid}\n              validating={validating}\n              value={value}\n            />\n          )}\n        </Field>\n\n        <Spacer height={4} />\n\n        <HStack justifyContent=\"flex-end\" spacing={3}>\n          <Button onClick={resetForm} width={100}>\n            Reset\n          </Button>\n\n          <Button colorScheme=\"green\" type=\"submit\" onClick={onSubmit} width={100}>\n            Submit\n          </Button>\n        </HStack>\n      </form>\n    </Page>\n  );\n};\n","import { Button } from \"@chakra-ui/button\";\nimport { Code, HStack, Spacer } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport * as React from \"react\";\nimport { useForm } from \"react-ux-form\";\nimport validator from \"validator\";\nimport { Input } from \"../components/Input\";\nimport { Page } from \"../components/Page\";\n\nexport const FieldsListenerForm = () => {\n  const { Field, FieldsListener, resetForm, submitForm } = useForm({\n    firstName: {\n      strategy: \"onBlur\",\n      initialValue: \"\",\n      sanitize: (value) => value.trim(),\n      validate: (value) => {\n        if (value === \"\") {\n          return \"First name is required\";\n        }\n      },\n    },\n    lastName: {\n      strategy: \"onBlur\",\n      initialValue: \"\",\n      sanitize: (value) => value.trim(),\n      validate: (value) => {\n        if (value === \"\") {\n          return \"Last name is required\";\n        }\n      },\n    },\n    emailAddress: {\n      strategy: \"onSuccessOrBlur\",\n      initialValue: \"\",\n      sanitize: (value) => value.trim(),\n      validate: (value) => {\n        if (!validator.isEmail(value)) {\n          return \"A valid email is required\";\n        }\n      },\n    },\n  });\n\n  const toast = useToast();\n\n  const onSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    submitForm(\n      (values) => {\n        console.log(\"values\", values);\n\n        toast({\n          title: \"Submission succeeded\",\n          status: \"success\",\n          duration: 5000,\n          isClosable: true,\n        });\n      },\n      (errors) => {\n        console.log(\"errors\", errors);\n\n        toast({\n          title: \"Submission failed\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n        });\n      },\n    );\n  };\n\n  return (\n    <Page\n      title=\"Fields listener\"\n      description={\n        <>\n          Using <Code>listenFields</Code> and the <Code>{\"<FieldsListener />\"}</Code> component,\n          it's really easy to synchronise components states and perform side-effects several fields\n          values changes.\n        </>\n      }\n    >\n      <FieldsListener names={[\"firstName\", \"lastName\", \"emailAddress\"]}>\n        {(states) => (\n          <pre\n            style={{\n              backgroundColor: \"#fafafa\",\n              borderRadius: 6,\n              borderWidth: 1,\n              fontSize: 14,\n              padding: 12,\n            }}\n          >\n            {JSON.stringify(states, null, 2)}\n          </pre>\n        )}\n      </FieldsListener>\n\n      <Spacer height={8} />\n\n      <form onSubmit={onSubmit}>\n        <Field name=\"firstName\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Input\n              label=\"First name\"\n              validation=\"Required\"\n              strategy=\"onBlur\"\n              placeholder=\"John\"\n              error={error}\n              onBlur={onBlur}\n              onChangeText={onChange}\n              ref={ref}\n              valid={valid}\n              validating={validating}\n              value={value}\n            />\n          )}\n        </Field>\n\n        <Field name=\"lastName\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Input\n              label=\"Last name\"\n              validation=\"Required\"\n              strategy=\"onBlur\"\n              placeholder=\"Doe\"\n              error={error}\n              onBlur={onBlur}\n              onChangeText={onChange}\n              ref={ref}\n              valid={valid}\n              validating={validating}\n              value={value}\n            />\n          )}\n        </Field>\n\n        <Field name=\"emailAddress\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Input\n              label=\"Email address\"\n              validation=\"Must be valid\"\n              strategy=\"onSuccessOrBlur\"\n              placeholder=\"john.doe@example.org\"\n              error={error}\n              onBlur={onBlur}\n              onChangeText={onChange}\n              ref={ref}\n              valid={valid}\n              validating={validating}\n              value={value}\n            />\n          )}\n        </Field>\n\n        <Spacer height={4} />\n\n        <HStack justifyContent=\"flex-end\" spacing={3}>\n          <Button onClick={resetForm} width={100}>\n            Reset\n          </Button>\n\n          <Button colorScheme=\"green\" type=\"submit\" onClick={onSubmit} width={100}>\n            Submit\n          </Button>\n        </HStack>\n      </form>\n    </Page>\n  );\n};\n","import { Button } from \"@chakra-ui/button\";\nimport { ExternalLinkIcon } from \"@chakra-ui/icons\";\nimport { HStack, Spacer } from \"@chakra-ui/layout\";\nimport { Link } from \"@chakra-ui/react\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport * as React from \"react\";\nimport { useForm } from \"react-ux-form\";\nimport validator from \"validator\";\nimport { Input } from \"../components/Input\";\nimport { Page } from \"../components/Page\";\n\nexport const IBANForm = () => {\n  const { Field, resetForm, submitForm } = useForm({\n    iban: {\n      strategy: \"onSuccessOrBlur\",\n      initialValue: \"\",\n      sanitize: (value) => value.trim(),\n      validate: (value) => {\n        if (!validator.isIBAN(value)) {\n          return \"Value is not a valid IBAN\";\n        }\n      },\n    },\n  });\n\n  const toast = useToast();\n\n  const onSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    submitForm(\n      (values) => {\n        console.log(\"values\", values);\n\n        toast({\n          title: \"Submission succeeded\",\n          status: \"success\",\n          duration: 5000,\n          isClosable: true,\n        });\n      },\n      (errors) => {\n        console.log(\"errors\", errors);\n\n        toast({\n          title: \"Submission failed\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n        });\n      },\n    );\n  };\n\n  return (\n    <Page\n      title=\"IBAN\"\n      description={\n        <>\n          You can try it by yourself using random IBAN from{\" \"}\n          <Link href=\"http://randomiban.com\" isExternal={true} color=\"gray.600\" fontWeight=\"medium\">\n            randomiban.com <ExternalLinkIcon marginTop={-1} />\n          </Link>\n          <br />\n          Validation is performed using{\" \"}\n          <Link\n            href=\"https://www.npmjs.com/package/validator\"\n            isExternal={true}\n            color=\"gray.600\"\n            fontWeight=\"medium\"\n          >\n            validator <ExternalLinkIcon marginTop={-1} />\n          </Link>\n        </>\n      }\n    >\n      <form onSubmit={onSubmit}>\n        <Field name=\"iban\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Input\n              label=\"IBAN\"\n              validation=\"Must be valid\"\n              placeholder=\"FR2230003000403598356122X09\"\n              strategy=\"onSuccessOrBlur\"\n              error={error}\n              onBlur={onBlur}\n              onChangeText={onChange}\n              ref={ref}\n              valid={valid}\n              validating={validating}\n              value={value}\n            />\n          )}\n        </Field>\n\n        <Spacer height={4} />\n\n        <HStack justifyContent=\"flex-end\" spacing={3}>\n          <Button onClick={resetForm} width={100}>\n            Reset\n          </Button>\n\n          <Button colorScheme=\"green\" type=\"submit\" onClick={onSubmit} width={100}>\n            Submit\n          </Button>\n        </HStack>\n      </form>\n    </Page>\n  );\n};\n","import { Button } from \"@chakra-ui/button\";\nimport { ExternalLinkIcon } from \"@chakra-ui/icons\";\nimport { HStack, Spacer } from \"@chakra-ui/layout\";\nimport { Link } from \"@chakra-ui/react\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport cardValidator from \"card-validator\";\nimport * as React from \"react\";\nimport { useForm } from \"react-ux-form\";\nimport { Rifm } from \"rifm\";\nimport { Input } from \"../components/Input\";\nimport { Page } from \"../components/Page\";\n\nconst formatCardNumber = (string: string) => {\n  const digits = (string.match(/\\d+/g) || []).join(\"\");\n  const chars = digits.split(\"\");\n\n  const res = chars\n    .reduce(\n      (acc, char, index) => ([4, 8, 12, 16].includes(index) ? `${acc} ${char}` : `${acc}${char}`),\n      \"\",\n    )\n    .substr(0, 19);\n\n  return string.endsWith(\" \") && [4, 9, 14, 19].includes(res.length) ? `${res} ` : res;\n};\n\nconst appendSpace = (res: string) => ([4, 9, 14].includes(res.length) ? `${res} ` : res);\n\nexport const InputMaskingForm = () => {\n  const { Field, resetForm, submitForm } = useForm({\n    cardNumber: {\n      strategy: \"onSuccessOrBlur\",\n      initialValue: \"\",\n      sanitize: (value) => value.trim(),\n      validate: (value) => {\n        if (!cardValidator.number(value).isValid) {\n          return \"Card number is invalid\";\n        }\n      },\n    },\n  });\n\n  const toast = useToast();\n\n  const onSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    submitForm(\n      (values) => {\n        console.log(\"values\", values);\n\n        toast({\n          title: \"Submission succeeded\",\n          status: \"success\",\n          duration: 5000,\n          isClosable: true,\n        });\n      },\n      (errors) => {\n        console.log(\"errors\", errors);\n\n        toast({\n          title: \"Submission failed\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n        });\n      },\n    );\n  };\n\n  return (\n    <Page\n      title=\"Input masking\"\n      description={\n        <>\n          You can try it by yourself using random credit card numbers from{\" \"}\n          <Link\n            href=\"https://www.creditcardvalidator.org/generator\"\n            isExternal={true}\n            color=\"gray.600\"\n            fontWeight=\"medium\"\n          >\n            creditcardvalidator.org <ExternalLinkIcon marginTop={-1} />\n          </Link>\n          <br />\n          Validation is performed using{\" \"}\n          <Link\n            href=\"https://www.npmjs.com/package/card-validator\"\n            isExternal={true}\n            color=\"gray.600\"\n            fontWeight=\"medium\"\n          >\n            card-validator <ExternalLinkIcon marginTop={-1} />\n          </Link>\n        </>\n      }\n    >\n      <form onSubmit={onSubmit}>\n        <Field name=\"cardNumber\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Rifm\n              accept={/\\d+/g}\n              mask={19 <= value.length}\n              format={formatCardNumber}\n              value={value}\n              onChange={onChange}\n              append={appendSpace}\n            >\n              {({ value, onChange }) => (\n                <Input\n                  label=\"Card number\"\n                  validation=\"Must be valid\"\n                  placeholder=\"4242 4242 4242 4242\"\n                  strategy=\"onSuccessOrBlur\"\n                  error={error}\n                  onBlur={onBlur}\n                  onChange={onChange}\n                  ref={ref}\n                  valid={valid}\n                  validating={validating}\n                  value={value}\n                />\n              )}\n            </Rifm>\n          )}\n        </Field>\n\n        <Spacer height={4} />\n\n        <HStack justifyContent=\"flex-end\" spacing={3}>\n          <Button onClick={resetForm} width={100}>\n            Reset\n          </Button>\n\n          <Button colorScheme=\"green\" type=\"submit\" onClick={onSubmit} width={100}>\n            Submit\n          </Button>\n        </HStack>\n      </form>\n    </Page>\n  );\n};\n","import { Button } from \"@chakra-ui/button\";\nimport { HStack, Spacer } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport * as React from \"react\";\nimport { useForm } from \"react-ux-form\";\nimport { Input } from \"../components/Input\";\nimport { Page } from \"../components/Page\";\n\nconst sanitize = (value: string) => value.trim();\nconst validate = (value: string) => {\n  if (value.length < 3) {\n    return \"Must be at least 3 characters\";\n  }\n};\n\nexport const StrategiesForm = () => {\n  const { Field, resetForm, submitForm } = useForm({\n    onChange: {\n      strategy: \"onChange\",\n      initialValue: \"\",\n      sanitize,\n      validate,\n    },\n    onSuccess: {\n      strategy: \"onSuccess\",\n      initialValue: \"\",\n      sanitize,\n      validate,\n    },\n    onBlur: {\n      strategy: \"onBlur\",\n      initialValue: \"\",\n      sanitize,\n      validate,\n    },\n    onSuccessOrBlur: {\n      strategy: \"onSuccessOrBlur\",\n      initialValue: \"\",\n      sanitize,\n      validate,\n    },\n    onSubmit: {\n      strategy: \"onSubmit\",\n      initialValue: \"\",\n      sanitize,\n      validate,\n    },\n  });\n\n  const toast = useToast();\n\n  const onSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    submitForm(\n      (values) => {\n        console.log(\"values\", values);\n\n        toast({\n          title: \"Submission succeeded\",\n          status: \"success\",\n          duration: 5000,\n          isClosable: true,\n        });\n      },\n      (errors) => {\n        console.log(\"errors\", errors);\n\n        toast({\n          title: \"Submission failed\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n        });\n      },\n    );\n  };\n\n  return (\n    <Page\n      title=\"Validation strategies\"\n      description=\"All these fields use the same sanitization rules (the value is trimmed), the same validation rule (the value must be at least 3 characters long) but different validation strategies, so you can easily play with each.\"\n    >\n      <form onSubmit={onSubmit}>\n        <Field name=\"onChange\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Input\n              label=\"onChange\"\n              validation=\"Must be at least 3 characters long\"\n              strategy=\"onChange\"\n              placeholder=\"â€¦\"\n              error={error}\n              onBlur={onBlur}\n              onChangeText={onChange}\n              ref={ref}\n              valid={valid}\n              validating={validating}\n              value={value}\n            />\n          )}\n        </Field>\n\n        <Field name=\"onSuccess\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Input\n              label=\"onSuccess\"\n              validation=\"Must be at least 3 characters long\"\n              strategy=\"onSuccess\"\n              placeholder=\"â€¦\"\n              error={error}\n              onBlur={onBlur}\n              onChangeText={onChange}\n              ref={ref}\n              valid={valid}\n              validating={validating}\n              value={value}\n            />\n          )}\n        </Field>\n\n        <Field name=\"onBlur\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Input\n              label=\"onBlur\"\n              validation=\"Must be at least 3 characters long\"\n              strategy=\"onBlur\"\n              placeholder=\"â€¦\"\n              error={error}\n              onBlur={onBlur}\n              onChangeText={onChange}\n              ref={ref}\n              valid={valid}\n              validating={validating}\n              value={value}\n            />\n          )}\n        </Field>\n\n        <Field name=\"onSuccessOrBlur\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Input\n              label=\"onSuccessOrBlur (default)\"\n              validation=\"Must be at least 3 characters long\"\n              strategy=\"onSuccessOrBlur\"\n              placeholder=\"â€¦\"\n              error={error}\n              onBlur={onBlur}\n              onChangeText={onChange}\n              ref={ref}\n              valid={valid}\n              validating={validating}\n              value={value}\n            />\n          )}\n        </Field>\n\n        <Field name=\"onSubmit\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Input\n              label=\"onSubmit\"\n              validation=\"Must be at least 3 characters long\"\n              strategy=\"onSubmit\"\n              placeholder=\"â€¦\"\n              error={error}\n              onBlur={onBlur}\n              onChangeText={onChange}\n              ref={ref}\n              valid={valid}\n              validating={validating}\n              value={value}\n            />\n          )}\n        </Field>\n\n        <Spacer height={4} />\n\n        <HStack justifyContent=\"flex-end\" spacing={3}>\n          <Button onClick={resetForm} width={100}>\n            Reset\n          </Button>\n\n          <Button colorScheme=\"green\" type=\"submit\" onClick={onSubmit} width={100}>\n            Submit\n          </Button>\n        </HStack>\n      </form>\n    </Page>\n  );\n};\n","import { Button } from \"@chakra-ui/button\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { HamburgerIcon } from \"@chakra-ui/icons\";\nimport { Flex, Text, VStack } from \"@chakra-ui/layout\";\nimport { useBreakpointValue } from \"@chakra-ui/media-query\";\nimport * as React from \"react\";\nimport { Route, Router, useLocation } from \"wouter\";\nimport { Link } from \"./components/Link\";\nimport { AsyncSubmissionForm } from \"./forms/AsyncSubmissionForm\";\nimport { AsyncValidationForm } from \"./forms/AsyncValidationForm\";\nimport { BasicForm } from \"./forms/BasicForm\";\nimport { CheckboxesForm } from \"./forms/CheckboxesForm\";\nimport { CreditCardForm } from \"./forms/CreditCardForm\";\nimport { FieldsListenerForm } from \"./forms/FieldsListenerForm\";\nimport { IBANForm } from \"./forms/IBANForm\";\nimport { InputMaskingForm } from \"./forms/InputMaskingForm\";\nimport { StrategiesForm } from \"./forms/StrategiesForm\";\n\nexport const App = () => {\n  const [path] = useLocation();\n  const isDesktop = !useBreakpointValue({ base: true, md: false });\n  const { isOpen, onToggle, onClose } = useDisclosure();\n\n  React.useEffect(onClose, [path]);\n\n  return (\n    <Router base=\"/react-ux-form\">\n      <Flex flex={1} flexDirection={{ base: \"column-reverse\", md: \"row\" }}>\n        <Button\n          borderRadius={0}\n          display={{ base: \"flex\", md: \"none\" }}\n          flexShrink={0}\n          fontSize={14}\n          height=\"48px\"\n          onClick={onToggle}\n        >\n          <HamburgerIcon height={5} width={5} marginRight={2} />\n          MENU\n        </Button>\n\n        {(isDesktop || isOpen) && (\n          <Flex\n            backgroundColor=\"gray.50\"\n            flexDirection=\"column\"\n            overflowY=\"scroll\"\n            paddingTop={6}\n            paddingBottom={6}\n            paddingLeft={4}\n            paddingRight={4}\n            borderColor=\"gray.100\"\n            borderStyle=\"solid\"\n            borderTopWidth={{ base: 1, md: 0 }}\n            borderRightWidth={{ base: 0, md: 1 }}\n            flexShrink={0}\n            height={{ base: \"40%\", md: \"auto\" }}\n            width={{ base: \"auto\", md: 320 }}\n          >\n            <Text\n              color=\"gray.500\"\n              fontSize={12}\n              fontWeight={600}\n              marginLeft={3}\n              marginBottom={3}\n              textTransform=\"uppercase\"\n            >\n              Examples\n            </Text>\n\n            <VStack align=\"initial\" spacing={1}>\n              <Link href=\"/\">Basic</Link>\n              <Link href=\"/strategies\">Validation strategies</Link>\n              <Link href=\"/fields-listener\">Fields listener</Link>\n              <Link href=\"/async-validation\">Async validation</Link>\n              <Link href=\"/async-submission\">Async submission</Link>\n              <Link href=\"/checkboxes\">Checkboxes</Link>\n              <Link href=\"/iban\">IBAN</Link>\n              <Link href=\"/credit-card\">Credit card</Link>\n              <Link href=\"/input-masking\">Input masking</Link>\n            </VStack>\n          </Flex>\n        )}\n\n        <Route path=\"/\" component={BasicForm} />\n        <Route path=\"/strategies\" component={StrategiesForm} />\n        <Route path=\"/fields-listener\" component={FieldsListenerForm} />\n        <Route path=\"/async-validation\" component={AsyncValidationForm} />\n        <Route path=\"/async-submission\" component={AsyncSubmissionForm} />\n        <Route path=\"/checkboxes\" component={CheckboxesForm} />\n        <Route path=\"/iban\" component={IBANForm} />\n        <Route path=\"/credit-card\" component={CreditCardForm} />\n        <Route path=\"/input-masking\" component={InputMaskingForm} />\n      </Flex>\n    </Router>\n  );\n};\n","import { ChakraProvider } from \"@chakra-ui/react\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\n\nReactDOM.render(\n  <ChakraProvider>\n    <App />\n  </ChakraProvider>,\n  document.getElementById(\"root\"),\n);\n"],"names":["relList","document","createElement","supports","link","querySelectorAll","MutationObserver","mutations","mutation","type","node","addedNodes","tagName","rel","observe","childList","subtree","ep","fetchOpts","script","integrity","referrerpolicy","referrerPolicy","crossorigin","credentials","getFetchOpts","href","p","Link","props","colors","useTheme","active","useRoute","WouterLink","style","__spreadValues","borderRadius","color","gray","display","flexGrow","fontWeight","paddingBottom","paddingLeft","paddingRight","paddingTop","backgroundColor","green","Input","React.forwardRef","error","label","onBlur","validation","strategy","placeholder","onChange","onChangeText","valid","validating","value","forwardedRef","id","useId","Box","FormLabel","htmlFor","marginBottom","Flex","flexDirection","alignItems","Text","fontSize","Spacer","width","InputGroup","ChakraInput","ref","isInvalid","e","target","InputRightElement","CheckIcon","Spinner","size","WarningIcon","height","Page","children","title","description","flexShrink","overflowY","base","md","maxWidth","Heading","resolveAfter","delay","Promise","resolve","AsyncSubmissionForm","Field","resetForm","submitForm","formStatus","useForm","emailAddress","initialValue","sanitize","trim","validate","validator","isEmail","toast","useToast","onSubmit","event","preventDefault","values","then","log","status","duration","isClosable","errors","name","HStack","justifyContent","spacing","Button","onClick","colorScheme","disabled","isLoading","AsyncValidationForm","debounceInterval","Code","BasicForm","firstName","lastName","CheckboxesForm","termsAndConditions","emailsFromPartners","Checkbox","isChecked","checked","CreditCardForm","cardNumber","cardValidator","number","isValid","expirationDate","cvc","cvv","isExternal","ExternalLinkIcon","marginTop","FieldsListenerForm","FieldsListener","names","states","borderWidth","padding","JSON","stringify","IBANForm","iban","isIBAN","formatCardNumber","string","res","match","join","split","reduce","acc","char","index","includes","substr","endsWith","length","appendSpace","InputMaskingForm","Rifm","accept","mask","format","append","onChange2","value2","StrategiesForm","onSuccess","onSuccessOrBlur","App","path","useLocation","isDesktop","useBreakpointValue","isOpen","onToggle","onClose","useDisclosure","Router","flex","HamburgerIcon","marginRight","borderColor","borderStyle","borderTopWidth","borderRightWidth","marginLeft","textTransform","VStack","align","Route","component","ReactDOM.render","ChakraProvider","getElementById"],"mappings":"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"}